#! /usr/bin/env python
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import numpy as np
import matplotlib
matplotlib.use("Agg")
from matplotlib.font_manager import FontProperties
import pylab
from makewaveform import *
from optimalSNR import *

# This script prints some basic calculations for GW astrophysics

G = 6.673*1e-11             #-- the gravitational constant in m^3/(kg*s^2)
c = 299792458               #-- the speed of light in m/s
pc = 3.0856775807*1e16      #-- a parsec in m
Mpc = pc*1e6                #-- a mega-parsec in m
Msun = 1.98892e30           #-- solar mass in kg
ms = Msun*G/c**3            #-- in geometrized unit 1 solar mass = 4.92e-6 seconds

Msun_g = 1.98892e33         #-- solar mass in grams
c_cm = 29979245800          #-- speed of light in cm/s

rotation_factor = sqrt(5.0/2.0)  # for beamed emission, 5deg jet opening angle.  Footnote #6 in S6 paper

print 'Msun in ergs:', Msun_g * c_cm**2
print 'Msun in joules:', Msun * c**2
print 'Mpc, in meters:', Mpc


print 'Schawarszchild radius for a 35 solar mass BH:', 2*G*35*Msun / c**2
print 'f_ISCO for 35 solar mass BBH:', 1/(6*pi*sqrt(6)) * c**3 / (G*2*35*Msun)

# Approximate strain generated by 1 Joule of d^2 Mij / dt^2 at 1 km
h_terrestrial = (2 * G / c**4) / (1000)

# Approximate strain generated by 1e-6 Msun of d^2 Mij / dt^2 at 1 kpc
# Rough approximation of GW energy radiated by a pulsar, rotational energy of 1.4Msun 15km at 10Hz
h_Galactic = (2 * G / c**4) * (1e-6 * Msun*c**2) / (1e-3 * Mpc)

# Approximate strain generated by 1 Msun of d^2 Mij / dt^2 at 1 Mpc
h_VirgoCluster = (2 * G / c**4) * (Msun*c**2) / (Mpc)

# Approximate strain generated by BNS at separation 30km and 400Hz, 20Mpc away

h_BNS = (8 * G / (20*Mpc * c**4)) * (1.4*Msun) * (30000.0)**2 * (2*pi*400)**2

# Approximate strain generated by Hulse-Taylor pulsar: 6400pc, 7.75hr period, semimajor axis 1,950,100km

h_HT = (8 * G / (6400.0*pc * c**4)) * (1.4*Msun) * (1.95e9)**2 * (2*pi*(1.0/(7.75*3600.0)))**2

# Radius of BNS at ~400Hz:
a = (G * 1.4*Msun / (4 * 2 * pi * 400))**(1./3.)

# Approximation of observable distance for max possible GW emission, 10^5 Msun/sec for 0.001 sec
d_max = (2 * G / c**4) * 0.01*Msun*c**2  / 1e-23


# f_ISCO
f_ISCO = (1. / (6*pi*sqrt(6))) * (c**3 / (G*2*1.4*Msun))

print
print 'Strain due to...'
print

print 'Terrestrial GWs:', h_terrestrial
print 'Galatic GWs (1e-6 Msun at 1kpc):', h_Galactic
print 'GWs, 1 Msun at 1Mpc:', h_VirgoCluster
print 'BNS GWs, 30km / 400Hz at 20Mpc:', h_BNS
print 'Hulse-Taylor pulsar:', h_HT
print
print 'Classical BNS orbital radius at 400Hz [m]:', a
print 'BNS f_ISCO:', f_ISCO
print 'Observable distance [Mpc] for max possible GW emission:', d_max / Mpc


# Energy and Flux

moon_albedo = 0.12      #-- albedo of Moon's surface (full moon)
moon_distance = 3.75e8  #-- Distance from Earth to Moon, meters
moon_radius = 1.737e6   #-- Radius of Moon, meters
Earth_Lsun = 1.4e3      #-- Energy flux at Earth from Sun, W/m^2

fullMoonIntensity = Earth_Lsun * pi*moon_radius**2 * moon_albedo / (4 * pi * moon_distance**2)

# Full moon intensity should be about 3x of what this naive calculation says it is...
print
print
print 'Intensities in Watts/m^2'
print
print 'Intensity of full moon is,' , fullMoonIntensity
print 'Intensity of Sun is,' , Earth_Lsun

# Simple calculation for intensity of BNS GWs at Earth
# Assume 0.1 Msun/sec of GWs emitted isotropically

BNS_flux = 0.1 * Msun * c**2 / (4 * pi * (20*Mpc)**2 )

print 'Intensity of BNS GWs at Earth,' , BNS_flux


# Hulse-Taylor pulsar power is 7.35e24 watts

HT_flux = 7.35e24 / (4 * pi * (6400 * pc)**2)

print 'Intensity of Hulse-Taylor pulsar at Earth is,', HT_flux



# Waveform calculations

# Set up the sample rate and duration of the time series
Fs = 4096.0
duration = 4.0
NFFT = Fs*duration

# Set the parameters for the sine-gaussian waveform.  hrss is amplitude.
hrss = 1.0
f0 = 1000.0
Q = 20.0

# Here's how you relate Q to the duration of the signal (tau): Q = f*tau*pi*sqrt(8)

#tau = Q / (pi*f0*sqrt(8.0))
tau = 0.002

alpha = 0.0   # chirp parameter.  alpha>zero is increasing frequency
delta = 0.0   # phase at peak of the envelope
iota = 0.0    # inclination of the source

# parameters are passed to makewaveform in a tilde-delimited string: hrss~tau~freq~alpha~delta~iota

params = str(hrss) + '~' + str(tau) + '~' + str(f0) + '~' + str(alpha) + '~' + str(delta) + '~' + str(iota)

t, hp, hc = makewaveform('chirplet',params,duration,duration/2,Fs)

# For now just use one of the polarizations
h = hp

# Now that we have our signal, we need to define the noise.  Give it an amplitude and use the 
# analytic relationship between amplitude and ASD to calculate the noise spectrum S(f)

# All this is so that we can calculate the SNR of our signal a few lines later.

noise_amp = 0.3

# Get the frequencies of the noise spectrum and define the spectrum.
S_freqs = np.arange(0.0,Fs/2+1,1.0)
S = (2*noise_amp**2/Fs)*np.ones(np.shape(S_freqs))

# Now define the noise vector itself.
n = random.randn(NFFT-1)*noise_amp

[SNR, h_rss, h_peak, Fchar, bw, Tchar, dur] = optimalSNR(h,Fs,0,S,S_freqs,Fmin=0.0,Fmax=Fs/2-1)

print
print 'SNR calculations - chirplet'

print "SNR, h_rss, h_peak, Fchar, bw, Tchar, dur"
print SNR, h_rss, h_peak, Fchar, bw, Tchar, dur



t, hp, hc = makewaveform('inspiral','1.4~1.4~0~20',duration,duration/2.0,Fs)

h = hp + hc

[SNR, h_rss, h_peak, Fchar, bw, Tchar, dur] = optimalSNR(h,Fs,0,S,S_freqs,Fmin=0.0,Fmax=Fs/2-1)

print
print 'SNR calculations - BNSinspiral at 20Mpc'

print "SNR, h_rss, h_peak, Fchar, bw, Tchar, dur"
print SNR, h_rss, h_peak, Fchar, bw, Tchar, dur


# Energy released in a inspiral, using the generic expression for GWs from a rotating source
# (rough calculation since the expression is for narrowband sources and chirps are broadband,
# also emission is probably more isotropic?)

#E_GW = (Fchar * h_rss * 20.0*Mpc)**2 * (1/rotation_factor**2) * (pi**2 * c**3)/G
E_GW = (Fchar * h_rss * 20.0*Mpc)**2 * (pi**2 * c**3)/G

print
print 'Energy release in BNS in GWs, joules:', E_GW
print 'Energy release in BNS in GWs, solar masses:', E_GW/(Msun*c**2)



# exclusion distance for 3Msun emitted at 150Hz

hrss = 2.5e-22  # in Hz^-1/2
energy = 3.0  # In solar masses
f0 = 100.     # in Hz
D_excl = sqrt(5./2.) * sqrt(G / (pi**2 * c**3)) * sqrt(energy * Msun*c**2) / (f0 * hrss)

print
print 'Exclusion distance for X-pipeline GW150914:', D_excl/Mpc
